% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00_resource.R
\name{HPCResourceClient}
\alias{HPCResourceClient}
\title{HPC API Resource Client}
\description{
The HPCResourceClient class provides methods to:
\itemize{
\item Initialize connections with dsHPC API endpoints
\item Access API methods and execute jobs
}
}
\details{
This R6 class manages connections and interactions with dsHPC API endpoints.
It extends the generic ResourceClient class to provide dsHPC-specific functionality.

The class uses a URL-based configuration system with the format:
\verb{http://host:port}
}
\examples{
\dontrun{
# Create a resource object
resource <- list(
  url = "http://localhost:9000",
  format = "dshpc.api",
  secret = "please_change_me"
)

# Initialize client
client <- HPCResourceClient$new(resource)

# Access API methods
methods <- client$getMethods()

# Upload a file
client$uploadFile("data.csv", content_type = "text/csv")
}

}
\section{Super class}{
\code{\link[resourcer:ResourceClient]{resourcer::ResourceClient}} -> \code{HPCResourceClient}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-HPCResourceClient-new}{\code{HPCResourceClient$new()}}
\item \href{#method-HPCResourceClient-getMethods}{\code{HPCResourceClient$getMethods()}}
\item \href{#method-HPCResourceClient-uploadFile}{\code{HPCResourceClient$uploadFile()}}
\item \href{#method-HPCResourceClient-executeJob}{\code{HPCResourceClient$executeJob()}}
\item \href{#method-HPCResourceClient-getJobStatus}{\code{HPCResourceClient$getJobStatus()}}
\item \href{#method-HPCResourceClient-jobSucceeded}{\code{HPCResourceClient$jobSucceeded()}}
\item \href{#method-HPCResourceClient-getJobOutput}{\code{HPCResourceClient$getJobOutput()}}
\item \href{#method-HPCResourceClient-waitForJob}{\code{HPCResourceClient$waitForJob()}}
\item \href{#method-HPCResourceClient-clone}{\code{HPCResourceClient$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="asDataFrame"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-asDataFrame'><code>resourcer::ResourceClient$asDataFrame()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="asTbl"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-asTbl'><code>resourcer::ResourceClient$asTbl()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="close"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-close'><code>resourcer::ResourceClient$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="downloadFile"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-downloadFile'><code>resourcer::ResourceClient$downloadFile()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="exec"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-exec'><code>resourcer::ResourceClient$exec()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="getConnection"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-getConnection'><code>resourcer::ResourceClient$getConnection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="resourcer" data-topic="ResourceClient" data-id="getResource"><a href='../../resourcer/html/ResourceClient.html#method-ResourceClient-getResource'><code>resourcer::ResourceClient$getResource()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-new"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new HPCResourceClient instance
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$new(resource)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{resource}}{A list containing resource configuration (url, format, secret)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new HPCResourceClient object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-getMethods"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-getMethods}{}}}
\subsection{Method \code{getMethods()}}{
Get available methods from the API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$getMethods()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of available methods
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-uploadFile"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-uploadFile}{}}}
\subsection{Method \code{uploadFile()}}{
Upload a file to the API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$uploadFile(file_path, content_type = NULL, metadata = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file to upload}

\item{\code{content_type}}{Content type of the file (optional)}

\item{\code{metadata}}{Additional metadata (optional)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if upload was successful
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-executeJob"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-executeJob}{}}}
\subsection{Method \code{executeJob()}}{
Execute a job on the API
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$executeJob(
  file_path,
  method_name,
  parameters = list(),
  wait = FALSE,
  timeout = 300
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file to process}

\item{\code{method_name}}{Name of the method to execute}

\item{\code{parameters}}{Parameters for the method}

\item{\code{wait}}{Whether to wait for job completion}

\item{\code{timeout}}{Maximum time to wait (in seconds)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Job information or results
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-getJobStatus"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-getJobStatus}{}}}
\subsection{Method \code{getJobStatus()}}{
Get the status of a job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$getJobStatus(file_path, method_name, parameters = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file being processed}

\item{\code{method_name}}{Name of the method executed}

\item{\code{parameters}}{Parameters used for the method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The status of the job as a string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-jobSucceeded"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-jobSucceeded}{}}}
\subsection{Method \code{jobSucceeded()}}{
Check if a job succeeded
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$jobSucceeded(file_path, method_name, parameters = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file being processed}

\item{\code{method_name}}{Name of the method executed}

\item{\code{parameters}}{Parameters used for the method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
TRUE if the job completed successfully, FALSE otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-getJobOutput"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-getJobOutput}{}}}
\subsection{Method \code{getJobOutput()}}{
Get the output of a completed job
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$getJobOutput(
  file_path,
  method_name,
  parameters = list(),
  parse_json = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file processed}

\item{\code{method_name}}{Name of the method executed}

\item{\code{parameters}}{Parameters used for the method}

\item{\code{parse_json}}{Whether to parse the output as JSON (default: TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The job output, parsed as JSON if requested
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-waitForJob"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-waitForJob}{}}}
\subsection{Method \code{waitForJob()}}{
Wait for a job to complete and return results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$waitForJob(
  file_path,
  method_name,
  parameters = list(),
  timeout = 300,
  interval = 5,
  parse_json = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_path}}{Path to the file processed}

\item{\code{method_name}}{Name of the method executed}

\item{\code{parameters}}{Parameters used for the method}

\item{\code{timeout}}{Maximum time to wait in seconds (default: 300)}

\item{\code{interval}}{Polling interval in seconds (default: 5)}

\item{\code{parse_json}}{Whether to parse the output as JSON (default: TRUE)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The job output if completed within timeout, otherwise throws an error
Get API configuration for use with dsHPC functions

This method creates an API configuration object using the resource information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-HPCResourceClient-clone"></a>}}
\if{latex}{\out{\hypertarget{method-HPCResourceClient-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{HPCResourceClient$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
